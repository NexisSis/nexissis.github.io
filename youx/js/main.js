$(".contact__arrow").each(function(){$(this).click(function(){return $("html,body").animate({scrollTop:0},"slow"),!1})});
$(".menu").click(function(){$(".header__menu").toggleClass("header__menu_active"),$(".menu div").toggleClass("menu_active"),$(".main__text-2").toggleClass("hide"),$(".main__social").toggleClass("main__social_active")}),$(".header__text-1").click(function(e){e.preventDefault();var a=$(this).attr("href");console.log(a),$("html,body").animate({scrollTop:$(a).offset().top-100},1e3),$(".header__menu").removeClass("header__menu_active"),$(".menu div").removeClass("menu_active"),$(".main__text-2").removeClass("hide"),$(".main__social").removeClass("main__social_active")});

$(".way__text-2").hover(function(t){var e=$(this).index();0==e&&$(".way__text-3").text("Изучаем компанию и конкурентов, находим преимущества, закрываем возражения, нивелируем страхи, создаем сильное предложение."),1==e&&$(".way__text-3").text("Проводим brain storm: продумываем структуру, блоки, характер и стиль исходя из задач бизнеса."),2==e&&$(".way__text-3").text("Управляем вниманием, создаём интерес к услуге/продукту в удобной навигации и стильном дизайне"),3==e&&$(".way__text-3").text("Создаём эффект присутствия, “проводим экскурсию” по сайту, выводим фокус на целевые действия."),4==e&&$(".way__text-3").text("Подбираем целевые для ниши рекламные площади (PPC, smm) помогаем отбить затраты на рекламу и выйти в прибыль"),5==e&&$(".way__text-3").text("Изучаем компанию и конкурентов, находим преимущества, закрываем возражения, нивелируем страхи, создаем сильное предложение."),6==e&&$(".way__text-3").text("Укрепляем имидж бренда, собираем и оптимизируем результаты.")});
!function(o){"use strict";var e=o.jCarousel={};e.version="0.3.8";var s=/^([+\-]=)?(.+)$/;e.parseTarget=function(t){var i=!1,e="object"!=typeof t?s.exec(t):null;return e?(t=parseInt(e[2],10)||0,e[1]&&(i=!0,"-="===e[1]&&(t*=-1))):"object"!=typeof t&&(t=parseInt(t,10)||0),{target:t,relative:i}},e.detectCarousel=function(t){for(var i;0<t.length;){if(0<(i=t.filter("[data-jcarousel]")).length)return i;if(0<(i=t.find("[data-jcarousel]")).length)return i;t=t.parent()}return null},e.base=function(r){return{version:e.version,_options:{},_element:null,_carousel:null,_init:o.noop,_create:o.noop,_destroy:o.noop,_reload:o.noop,create:function(){return this._element.attr("data-"+r.toLowerCase(),!0).data(r,this),!1===this._trigger("create")||(this._create(),this._trigger("createend")),this},destroy:function(){return!1===this._trigger("destroy")||(this._destroy(),this._trigger("destroyend"),this._element.removeData(r).removeAttr("data-"+r.toLowerCase())),this},reload:function(t){return!1===this._trigger("reload")||(t&&this.options(t),this._reload(),this._trigger("reloadend")),this},element:function(){return this._element},options:function(t,i){if(0===arguments.length)return o.extend({},this._options);if("string"==typeof t){if(void 0===i)return void 0===this._options[t]?null:this._options[t];this._options[t]=i}else this._options=o.extend({},this._options,t);return this},carousel:function(){return this._carousel||(this._carousel=e.detectCarousel(this.options("carousel")||this._element),this._carousel||o.error('Could not detect carousel for plugin "'+r+'"')),this._carousel},_trigger:function(t,i,e){var s,n=!1;return e=[this].concat(e||[]),(i||this._element).each(function(){s=o.Event((r+":"+t).toLowerCase()),o(this).trigger(s,e),s.isDefaultPrevented()&&(n=!0)}),!n}}},e.plugin=function(r,t){var i=o[r]=function(t,i){this._element=o(t),this.options(i),this._init(),this.create()};return i.fn=i.prototype=o.extend({},e.base(r),t),o.fn[r]=function(e){var s=Array.prototype.slice.call(arguments,1),n=this;return"string"==typeof e?this.each(function(){var t=o(this).data(r);if(!t)return o.error("Cannot call methods on "+r+' prior to initialization; attempted to call method "'+e+'"');if(!o.isFunction(t[e])||"_"===e.charAt(0))return o.error('No such method "'+e+'" for '+r+" instance");var i=t[e].apply(t,s);return i!==t&&void 0!==i?(n=i,!1):void 0}):this.each(function(){var t=o(this).data(r);t instanceof i?t.reload(e):new i(this,e)}),n},i}}(jQuery),function(g,t){"use strict";var e=g(t),f=function(t){return parseFloat(t)||0};g.jCarousel.plugin("jcarousel",{animating:!1,tail:0,inTail:!1,resizeState:null,resizeTimer:null,lt:null,vertical:!1,rtl:!1,circular:!1,underflow:!1,relative:!1,_options:{list:function(){return this.element().children().eq(0)},items:function(){return this.list().children()},animation:400,transitions:!1,wrap:null,vertical:null,rtl:null,center:!1},_list:null,_items:null,_target:g(),_first:g(),_last:g(),_visible:g(),_fullyvisible:g(),_init:function(){var i=this;return i.resizeState=e.width()+"x"+e.height(),this.onWindowResize=function(){i.resizeTimer&&clearTimeout(i.resizeTimer),i.resizeTimer=setTimeout(function(){var t=e.width()+"x"+e.height();t!==i.resizeState&&(i.resizeState=t,i.reload())},100)},this},_create:function(){this._reload(),e.on("resize.jcarousel",this.onWindowResize)},_destroy:function(){e.off("resize.jcarousel",this.onWindowResize)},_reload:function(){this.vertical=this.options("vertical"),null==this.vertical&&(this.vertical=f(this.list().height())>f(this.list().width())),this.rtl=this.options("rtl"),null==this.rtl&&(this.rtl=function(t){if("rtl"===(""+t.attr("dir")).toLowerCase())return!0;var i=!1;return t.parents("[dir]").each(function(){if(/rtl/i.test(g(this).attr("dir")))return!(i=!0)}),i}(this._element)),this.lt=this.vertical?"top":"left",this.relative="relative"===this.list().css("position"),this._list=null,this._items=null;var t=0<=this.index(this._target)?this._target:this.closest();this.circular="circular"===this.options("wrap"),this.underflow=!1;var i={left:0,top:0};return 0<t.length&&(this._prepare(t),this.list().find("[data-jcarousel-clone]").remove(),this._items=null,this.underflow=this._fullyvisible.length>=this.items().length,this.circular=this.circular&&!this.underflow,i[this.lt]=this._position(t)+"px"),this.move(i),this},list:function(){if(null===this._list){var t=this.options("list");this._list=g.isFunction(t)?t.call(this):this._element.find(t)}return this._list},items:function(){if(null===this._items){var t=this.options("items");this._items=(g.isFunction(t)?t.call(this):this.list().find(t)).not("[data-jcarousel-clone]")}return this._items},index:function(t){return this.items().index(t)},closest:function(){var i,e=this,s=this.list().position()[this.lt],n=g(),r=!1,o=this.vertical?"bottom":this.rtl&&!this.relative?"left":"right";return this.rtl&&this.relative&&!this.vertical&&(s+=f(this.list().width())-this.clipping()),this.items().each(function(){if(n=g(this),r)return!1;var t=e.dimension(n);if(0<=(s+=t)){if(i=t-f(n.css("margin-"+o)),!(Math.abs(s)-t+i/2<=0))return!1;r=!0}}),n},target:function(){return this._target},first:function(){return this._first},last:function(){return this._last},visible:function(){return this._visible},fullyvisible:function(){return this._fullyvisible},hasNext:function(){if(!1===this._trigger("hasnext"))return!0;var t=this.options("wrap"),i=this.items().length-1,e=this.options("center")?this._target:this._last;return!!(0<=i&&!this.underflow&&(t&&"first"!==t||this.index(e)<i||this.tail&&!this.inTail))},hasPrev:function(){if(!1===this._trigger("hasprev"))return!0;var t=this.options("wrap");return!!(0<this.items().length&&!this.underflow&&(t&&"last"!==t||0<this.index(this._first)||this.tail&&this.inTail))},clipping:function(){return f(this._element["inner"+(this.vertical?"Height":"Width")]())},dimension:function(t){return f(t["outer"+(this.vertical?"Height":"Width")](!0))},scroll:function(t,i,e){if(this.animating)return this;if(!1===this._trigger("scroll",null,[t,i]))return this;g.isFunction(i)&&(e=i,i=!0);var s=g.jCarousel.parseTarget(t);if(s.relative){var n,r,o,a,l,h,u,c,f=this.items().length-1,d=Math.abs(s.target),v=this.options("wrap");if(0<s.target){var p=this.index(this._last);if(f<=p&&this.tail)this.inTail?"both"===v||"last"===v?this._scroll(0,i,e):g.isFunction(e)&&e.call(this,!1):this._scrollTail(i,e);else if(n=this.index(this._target),this.underflow&&n===f&&("circular"===v||"both"===v||"last"===v)||!this.underflow&&p===f&&("both"===v||"last"===v))this._scroll(0,i,e);else if(o=n+d,this.circular&&f<o){for(c=f,l=this.items().get(-1);c++<o;)l=this.items().eq(0),(h=0<=this._visible.index(l))&&l.after(l.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(l),h||((u={})[this.lt]=this.dimension(l),this.moveBy(u)),this._items=null;this._scroll(l,i,e)}else this._scroll(Math.min(o,f),i,e)}else if(this.inTail)this._scroll(Math.max(this.index(this._first)-d+1,0),i,e);else if(r=this.index(this._first),n=this.index(this._target),o=(a=this.underflow?n:r)-d,a<=0&&(this.underflow&&"circular"===v||"both"===v||"first"===v))this._scroll(f,i,e);else if(this.circular&&o<0){for(c=o,l=this.items().get(0);c++<0;){l=this.items().eq(-1),(h=0<=this._visible.index(l))&&l.after(l.clone(!0).attr("data-jcarousel-clone",!0)),this.list().prepend(l),this._items=null;var m=this.dimension(l);(u={})[this.lt]=-m,this.moveBy(u)}this._scroll(l,i,e)}else this._scroll(Math.max(o,0),i,e)}else this._scroll(s.target,i,e);return this._trigger("scrollend"),this},moveBy:function(t,i){var e=this.list().position(),s=1,n=0;return this.rtl&&!this.vertical&&(s=-1,this.relative&&(n=f(this.list().width())-this.clipping())),t.left&&(t.left=f(e.left)+n+f(t.left)*s+"px"),t.top&&(t.top=f(e.top)+n+f(t.top)*s+"px"),this.move(t,i)},move:function(t,i){i=i||{};var e=this.options("transitions"),s=!!e,n=!!e.transforms,r=!!e.transforms3d,o=i.duration||0,a=this.list();if(!s&&0<o)a.animate(t,i);else{var l=i.complete||g.noop,h={};if(s){var u={transitionDuration:a.css("transitionDuration"),transitionTimingFunction:a.css("transitionTimingFunction"),transitionProperty:a.css("transitionProperty")},c=l;l=function(){g(this).css(u),c.call(this)},h={transitionDuration:(0<o?o/1e3:0)+"s",transitionTimingFunction:e.easing||i.easing,transitionProperty:0<o?n||r?"all":t.left?"left":"top":"none",transform:"none"}}r?h.transform="translate3d("+(t.left||0)+","+(t.top||0)+",0)":n?h.transform="translate("+(t.left||0)+","+(t.top||0)+")":g.extend(h,t),s&&0<o&&a.one("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",l),a.css(h),o<=0&&a.each(function(){l.call(this)})}},_scroll:function(t,i,e){if(this.animating)return g.isFunction(e)&&e.call(this,!1),this;if("object"!=typeof t?t=this.items().eq(t):void 0===t.jquery&&(t=g(t)),0===t.length)return g.isFunction(e)&&e.call(this,!1),this;this.inTail=!1,this._prepare(t);var s=this._position(t);if(s===f(this.list().position()[this.lt]))return g.isFunction(e)&&e.call(this,!1),this;var n={};return n[this.lt]=s+"px",this._animate(n,i,e),this},_scrollTail:function(t,i){if(this.animating||!this.tail)return g.isFunction(i)&&i.call(this,!1),this;var e=this.list().position()[this.lt];this.rtl&&this.relative&&!this.vertical&&(e+=f(this.list().width())-this.clipping()),this.rtl&&!this.vertical?e+=this.tail:e-=this.tail,this.inTail=!0;var s={};return s[this.lt]=e+"px",this._update({target:this._target.next(),fullyvisible:this._fullyvisible.slice(1).add(this._visible.last())}),this._animate(s,t,i),this},_animate:function(t,i,e){if(e=e||g.noop,!1===this._trigger("animate"))return e.call(this,!1),this;this.animating=!0;var s=this.options("animation"),n=g.proxy(function(){this.animating=!1;var t=this.list().find("[data-jcarousel-clone]");0<t.length&&(t.remove(),this._reload()),this._trigger("animateend"),e.call(this,!0)},this),r="object"==typeof s?g.extend({},s):{duration:s},o=r.complete||g.noop;return!1===i?r.duration=0:void 0!==g.fx.speeds[r.duration]&&(r.duration=g.fx.speeds[r.duration]),r.complete=function(){n(),o.call(this)},this.move(t,r),this},_prepare:function(t){var i,e,s,n=this.index(t),r=n,o=this.dimension(t),a=this.clipping(),l=this.vertical?"bottom":this.rtl?"left":"right",h=this.options("center"),u={target:t,first:t,last:t,visible:t,fullyvisible:o<=a?t:g()};if(h&&(o/=2,a/=2),o<a)for(;;){if(0===(i=this.items().eq(++r)).length){if(!this.circular)break;if(i=this.items().eq(0),t.get(0)===i.get(0))break;if((e=0<=this._visible.index(i))&&i.after(i.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(i),!e){var c={};c[this.lt]=this.dimension(i),this.moveBy(c)}this._items=null}if(0===(s=this.dimension(i)))break;if(o+=s,u.last=i,u.visible=u.visible.add(i),o-f(i.css("margin-"+l))<=a&&(u.fullyvisible=u.fullyvisible.add(i)),a<=o)break}if(!this.circular&&!h&&o<a)for(r=n;!(--r<0||0===(i=this.items().eq(r)).length||0===(s=this.dimension(i))||(o+=s,u.first=i,u.visible=u.visible.add(i),o-f(i.css("margin-"+l))<=a&&(u.fullyvisible=u.fullyvisible.add(i)),a<=o)););return this._update(u),this.tail=0,h||"circular"===this.options("wrap")||"custom"===this.options("wrap")||this.index(u.last)!==this.items().length-1||a<(o-=f(u.last.css("margin-"+l)))&&(this.tail=o-a),this},_position:function(t){var i=this._first,e=f(i.position()[this.lt]),s=this.options("center"),n=s?this.clipping()/2-this.dimension(i)/2:0;return this.rtl&&!this.vertical?(this.relative?e-=f(this.list().width())-this.dimension(i):e-=this.clipping()-this.dimension(i),e+=n):e-=n,!s&&(this.index(t)>this.index(i)||this.inTail)&&this.tail?(e=this.rtl&&!this.vertical?e-this.tail:e+this.tail,this.inTail=!0):this.inTail=!1,-e},_update:function(s){var t,n=this,r={target:this._target,first:this._first,last:this._last,visible:this._visible,fullyvisible:this._fullyvisible},o=this.index(s.first||r.first)<this.index(r.first),i=function(t){var i=[],e=[];s[t].each(function(){r[t].index(this)<0&&i.push(this)}),r[t].each(function(){s[t].index(this)<0&&e.push(this)}),o?i=i.reverse():e=e.reverse(),n._trigger(t+"in",g(i)),n._trigger(t+"out",g(e)),n["_"+t]=s[t]};for(t in s)i(t);return this}})}(jQuery,window),function(f){"use strict";f.jcarousel.fn.scrollIntoView=function(t,i,e){var s,n=f.jCarousel.parseTarget(t),r=this.index(this._fullyvisible.first()),o=this.index(this._fullyvisible.last());if((s=n.relative?n.target<0?Math.max(0,r+n.target):o+n.target:"object"!=typeof n.target?n.target:this.index(n.target))<r)return this.scroll(s,i,e);if(r<=s&&s<=o)return f.isFunction(e)&&e.call(this,!1),this;for(var a,l=this.items(),h=this.clipping(),u=this.vertical?"bottom":this.rtl?"left":"right",c=0;0!==(a=l.eq(s)).length;){if(h<=(c+=this.dimension(a))){c-(parseFloat(a.css("margin-"+u))||0)!==h&&s++;break}if(s<=0)break;s--}return this.scroll(s,i,e)}}(jQuery),function(n){"use strict";n.jCarousel.plugin("jcarouselControl",{_options:{target:"+=1",event:"click",method:"scroll"},_active:null,_init:function(){this.onDestroy=n.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",n.proxy(this._create,this))},this),this.onReload=n.proxy(this._reload,this),this.onEvent=n.proxy(function(t){t.preventDefault();var i=this.options("method");n.isFunction(i)?i.call(this):this.carousel().jcarousel(this.options("method"),this.options("target"))},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend jcarousel:scrollend",this.onReload),this._element.on(this.options("event")+".jcarouselcontrol",this.onEvent),this._reload()},_destroy:function(){this._element.off(".jcarouselcontrol",this.onEvent),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend jcarousel:scrollend",this.onReload)},_reload:function(){var t,i=n.jCarousel.parseTarget(this.options("target")),e=this.carousel();if(i.relative)t=e.jcarousel(0<i.target?"hasNext":"hasPrev");else{var s="object"!=typeof i.target?e.jcarousel("items").eq(i.target):i.target;t=0<=e.jcarousel("target").index(s)}return this._active!==t&&(this._trigger(t?"active":"inactive"),this._active=t),this}})}(jQuery),function(c){"use strict";c.jCarousel.plugin("jcarouselPagination",{_options:{perPage:null,item:function(t){return'<a href="#'+t+'">'+t+"</a>"},event:"click",method:"scroll"},_carouselItems:null,_pages:{},_items:{},_currentPage:null,_init:function(){this.onDestroy=c.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",c.proxy(this._create,this))},this),this.onReload=c.proxy(this._reload,this),this.onScroll=c.proxy(this._update,this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend",this.onReload).on("jcarousel:scrollend",this.onScroll),this._reload()},_destroy:function(){this._clear(),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend",this.onReload).off("jcarousel:scrollend",this.onScroll),this._carouselItems=null},_reload:function(){var t=this.options("perPage");if(this._pages={},this._items={},c.isFunction(t)&&(t=t.call(this)),null==t)this._pages=this._calculatePages();else for(var i,e=parseInt(t,10)||0,s=this._getCarouselItems(),n=1,r=0;0!==(i=s.eq(r++)).length;)this._pages[n]?this._pages[n]=this._pages[n].add(i):this._pages[n]=i,r%e==0&&n++;this._clear();var o=this,a=this.carousel().data("jcarousel"),l=this._element,h=this.options("item"),u=this._getCarouselItems().length;c.each(this._pages,function(s,n){var t=o._items[s]=c(h.call(o,s,n));t.on(o.options("event")+".jcarouselpagination",c.proxy(function(){var t=n.eq(0);if(a.circular){var i=a.index(a.target()),e=a.index(t);parseFloat(s)>parseFloat(o._currentPage)?e<i&&(t="+="+(u-i+e)):i<e&&(t="-="+(i+(u-e)))}a[this.options("method")](t)},o)),l.append(t)}),this._update()},_update:function(){var e,s=this.carousel().jcarousel("target");c.each(this._pages,function(t,i){if(i.each(function(){if(s.is(this))return e=t,!1}),e)return!1}),this._currentPage!==e&&(this._trigger("inactive",this._items[this._currentPage]),this._trigger("active",this._items[e])),this._currentPage=e},items:function(){return this._items},reloadCarouselItems:function(){return this._carouselItems=null,this},_clear:function(){this._element.empty(),this._currentPage=null},_calculatePages:function(){for(var t,i,e=this.carousel().data("jcarousel"),s=this._getCarouselItems(),n=e.clipping(),r=0,o=0,a=1,l={};0!==(t=s.eq(o++)).length;)n<r+(i=e.dimension(t))&&(a++,r=0),r+=i,l[a]?l[a]=l[a].add(t):l[a]=t;return l},_getCarouselItems:function(){return this._carouselItems||(this._carouselItems=this.carousel().jcarousel("items")),this._carouselItems}})}(jQuery),function(t,e){"use strict";var s,n;t.each({hidden:"visibilitychange",mozHidden:"mozvisibilitychange",msHidden:"msvisibilitychange",webkitHidden:"webkitvisibilitychange"},function(t,i){if(void 0!==e[t])return s=t,n=i,!1}),t.jCarousel.plugin("jcarouselAutoscroll",{_options:{target:"+=1",interval:3e3,autostart:!0,method:"scroll"},_timer:null,_started:!1,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onAnimateEnd=t.proxy(this._start,this),this.onVisibilityChange=t.proxy(function(){e[s]?this._stop():this._start()},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy),t(e).on(n,this.onVisibilityChange),this.options("autostart")&&this.start()},_destroy:function(){this._stop(),this.carousel().off("jcarousel:destroy",this.onDestroy),t(e).off(n,this.onVisibilityChange)},_start:function(){if(this._stop(),this._started)return this.carousel().one("jcarousel:animateend",this.onAnimateEnd),this._timer=setTimeout(t.proxy(function(){this.carousel().jcarousel(this.options("method"),this.options("target"))},this),this.options("interval")),this},_stop:function(){return this._timer&&(this._timer=clearTimeout(this._timer)),this.carousel().off("jcarousel:animateend",this.onAnimateEnd),this},start:function(){return this._started=!0,this._start(),this},stop:function(){return this._started=!1,this._stop(),this}})}(jQuery,document),function(t,i){if("function"==typeof define&&define.amd)define(["module","exports"],i);else if("undefined"!=typeof exports)i(module,exports);else{var e={exports:{}};i(e,e.exports),t.WOW=e.exports}}(this,function(t,i){"use strict";function e(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}function n(t,i){return 0<=i.indexOf(t)}function s(t,i,e){null!=t.addEventListener?t.addEventListener(i,e,!1):null!=t.attachEvent?t.attachEvent("on"+i,e):t[i]=e}function r(t,i,e){null!=t.removeEventListener?t.removeEventListener(i,e,!1):null!=t.detachEvent?t.detachEvent("on"+i,e):delete t[i]}Object.defineProperty(i,"__esModule",{value:!0});var o,a,l=function(){function s(t,i){for(var e=0;e<i.length;e++){var s=i[e];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}return function(t,i,e){return i&&s(t.prototype,i),e&&s(t,e),t}}(),h=window.WeakMap||window.MozWeakMap||function(){function t(){e(this,t),this.keys=[],this.values=[]}return l(t,[{key:"get",value:function(t){for(var i=0;i<this.keys.length;i++){if(this.keys[i]===t)return this.values[i]}}},{key:"set",value:function(t,i){for(var e=0;e<this.keys.length;e++){if(this.keys[e]===t)return this.values[e]=i,this}return this.keys.push(t),this.values.push(i),this}}]),t}(),u=window.MutationObserver||window.WebkitMutationObserver||window.MozMutationObserver||(a=o=function(){function t(){e(this,t),"undefined"!=typeof console&&null!==console&&(console.warn("MutationObserver is not supported by your browser."),console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content."))}return l(t,[{key:"observe",value:function(){}}]),t}(),o.notSupported=!0,a),c=window.getComputedStyle||function(e){var s=/(\-([a-z]){1})/g;return{getPropertyValue:function(t){"float"===t&&(t="styleFloat"),s.test(t)&&t.replace(s,function(t,i){return i.toUpperCase()});var i=e.currentStyle;return(null!=i?i[t]:void 0)||null}}},f=function(){function i(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];e(this,i),this.defaults={boxClass:"wow",animateClass:"animated",offset:0,mobile:!0,live:!0,callback:null,scrollContainer:null},this.animate="requestAnimationFrame"in window?function(t){return window.requestAnimationFrame(t)}:function(t){return t()},this.vendors=["moz","webkit"],this.start=this.start.bind(this),this.resetAnimation=this.resetAnimation.bind(this),this.scrollHandler=this.scrollHandler.bind(this),this.scrollCallback=this.scrollCallback.bind(this),this.scrolled=!0,this.config=function(t,i){for(var e in i)if(null==t[e]){var s=i[e];t[e]=s}return t}(t,this.defaults),null!=t.scrollContainer&&(this.config.scrollContainer=document.querySelector(t.scrollContainer)),this.animationNameCache=new h,this.wowEvent=function(t){var i=!(arguments.length<=1||void 0===arguments[1])&&arguments[1],e=!(arguments.length<=2||void 0===arguments[2])&&arguments[2],s=arguments.length<=3||void 0===arguments[3]?null:arguments[3],n=void 0;return null!=document.createEvent?(n=document.createEvent("CustomEvent")).initCustomEvent(t,i,e,s):null!=document.createEventObject?(n=document.createEventObject()).eventType=t:n.eventName=t,n}(this.config.boxClass)}return l(i,[{key:"init",value:function(){this.element=window.document.documentElement,n(document.readyState,["interactive","complete"])?this.start():s(document,"DOMContentLoaded",this.start),this.finished=[]}},{key:"start",value:function(){var r=this;if(this.stopped=!1,this.boxes=[].slice.call(this.element.querySelectorAll("."+this.config.boxClass)),this.all=this.boxes.slice(0),this.boxes.length)if(this.disabled())this.resetStyle();else for(var t=0;t<this.boxes.length;t++){var i=this.boxes[t];this.applyStyle(i,!0)}(this.disabled()||(s(this.config.scrollContainer||window,"scroll",this.scrollHandler),s(window,"resize",this.scrollHandler),this.interval=setInterval(this.scrollCallback,50)),this.config.live)&&new u(function(t){for(var i=0;i<t.length;i++)for(var e=t[i],s=0;s<e.addedNodes.length;s++){var n=e.addedNodes[s];r.doSync(n)}}).observe(document.body,{childList:!0,subtree:!0})}},{key:"stop",value:function(){this.stopped=!0,r(this.config.scrollContainer||window,"scroll",this.scrollHandler),r(window,"resize",this.scrollHandler),null!=this.interval&&clearInterval(this.interval)}},{key:"sync",value:function(){u.notSupported&&this.doSync(this.element)}},{key:"doSync",value:function(t){if(null!=t||(t=this.element),1===t.nodeType)for(var i=(t=t.parentNode||t).querySelectorAll("."+this.config.boxClass),e=0;e<i.length;e++){var s=i[e];n(s,this.all)||(this.boxes.push(s),this.all.push(s),this.stopped||this.disabled()?this.resetStyle():this.applyStyle(s,!0),this.scrolled=!0)}}},{key:"show",value:function(t){return this.applyStyle(t),t.className=t.className+" "+this.config.animateClass,null!=this.config.callback&&this.config.callback(t),i=t,e=this.wowEvent,null!=i.dispatchEvent?i.dispatchEvent(e):e in(null!=i)?i[e]():"on"+e in(null!=i)&&i["on"+e](),s(t,"animationend",this.resetAnimation),s(t,"oanimationend",this.resetAnimation),s(t,"webkitAnimationEnd",this.resetAnimation),s(t,"MSAnimationEnd",this.resetAnimation),t;var i,e}},{key:"applyStyle",value:function(t,i){var e=this,s=t.getAttribute("data-wow-duration"),n=t.getAttribute("data-wow-delay"),r=t.getAttribute("data-wow-iteration");return this.animate(function(){return e.customStyle(t,i,s,n,r)})}},{key:"resetStyle",value:function(){for(var t=0;t<this.boxes.length;t++){this.boxes[t].style.visibility="visible"}}},{key:"resetAnimation",value:function(t){if(0<=t.type.toLowerCase().indexOf("animationend")){var i=t.target||t.srcElement;i.className=i.className.replace(this.config.animateClass,"").trim()}}},{key:"customStyle",value:function(t,i,e,s,n){return i&&this.cacheAnimationName(t),t.style.visibility=i?"hidden":"visible",e&&this.vendorSet(t.style,{animationDuration:e}),s&&this.vendorSet(t.style,{animationDelay:s}),n&&this.vendorSet(t.style,{animationIterationCount:n}),this.vendorSet(t.style,{animationName:i?"none":this.cachedAnimationName(t)}),t}},{key:"vendorSet",value:function(t,i){for(var e in i)if(i.hasOwnProperty(e)){var s=i[e];t[""+e]=s;for(var n=0;n<this.vendors.length;n++){t[""+this.vendors[n]+e.charAt(0).toUpperCase()+e.substr(1)]=s}}}},{key:"vendorCSS",value:function(t,i){for(var e=c(t),s=e.getPropertyCSSValue(i),n=0;n<this.vendors.length;n++){var r=this.vendors[n];s=s||e.getPropertyCSSValue("-"+r+"-"+i)}return s}},{key:"animationName",value:function(i){var e=void 0;try{e=this.vendorCSS(i,"animation-name").cssText}catch(t){e=c(i).getPropertyValue("animation-name")}return"none"===e?"":e}},{key:"cacheAnimationName",value:function(t){return this.animationNameCache.set(t,this.animationName(t))}},{key:"cachedAnimationName",value:function(t){return this.animationNameCache.get(t)}},{key:"scrollHandler",value:function(){this.scrolled=!0}},{key:"scrollCallback",value:function(){if(this.scrolled){this.scrolled=!1;for(var t=[],i=0;i<this.boxes.length;i++){var e=this.boxes[i];if(e){if(this.isVisible(e)){this.show(e);continue}t.push(e)}}this.boxes=t,this.boxes.length||this.config.live||this.stop()}}},{key:"offsetTop",value:function(t){for(;void 0===t.offsetTop;)t=t.parentNode;for(var i=t.offsetTop;t.offsetParent;)i+=(t=t.offsetParent).offsetTop;return i}},{key:"isVisible",value:function(t){var i=t.getAttribute("data-wow-offset")||this.config.offset,e=this.config.scrollContainer&&this.config.scrollContainer.scrollTop||window.pageYOffset,s=e+Math.min(this.element.clientHeight,"innerHeight"in window?window.innerHeight:document.documentElement.clientHeight)-i,n=this.offsetTop(t),r=n+t.clientHeight;return n<=s&&e<=r}},{key:"disabled",value:function(){return!this.config.mobile&&(t=navigator.userAgent,/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(t));var t}}]),i}();i.default=f,t.exports=i.default}),(new WOW).init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
